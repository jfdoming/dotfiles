# Environment variables

export EDITOR=vim

# http://manpages.ubuntu.com/manpages/xenial/man1/gpg-agent.1.html
export GPG_TTY=$(tty)

export HISTSIZE=65536
export HISTFILESIZE=65536

# Dotfiles stuff
dotfiles() {
    git --git-dir=$HOME/.dotfiles --work-tree=$HOME "$@"
}

.f() {
    case "$1" in
        update)
            dotfiles pull
            ;;
        upload)
            if [ -z "$2" ]; then
                echo "Please enter an upload message!"
                return
            fi

            dotfiles add -u > /dev/null
            if [ -z "$(dotfiles diff --name-only --cached)" ]; then
                # No files were staged!
                echo "There are no changes to upload."
                return
            fi

            dotfiles commit -m "$2" > /dev/null
            if [ "$?" != "0" ] || [ -z "$(dotfiles diff --name-only HEAD~1 HEAD)" ]; then
                # No files were committed, for some reason.
                echo "Upload failed!"
                return
            fi

            dotfiles push origin master
            ;;
        register)
            if [ -z "$2" ]; then
                echo "Please specify a new dotfile to register!"
                return
            fi

            unset __changes_stashed
            if [ -n "$(dotfiles diff --name-only HEAD)" ]; then
                dotfiles stash > /dev/null
                __changes_stashed=1
            fi

            dotfiles add "$2" > /dev/null 2>&1
            if [ -z "$(dotfiles diff --name-only --cached)" ]; then
                # No files were staged!
                echo "There are no new changes. Perhaps you mistyped the filename?"
                if [ "$__changes_stashed" = "1" ]; then
                    dotfiles stash pop > /dev/null 2>&1
                fi
                unset __changes_stashed
                return
            fi

            dotfiles commit -m "Add new dotfile: $2" > /dev/null 2>&1
            if [ "$?" != "0" ] || [ -z "$(dotfiles diff --name-only HEAD~1 HEAD)" ]; then
                # No files were committed, for some reason.
                echo "Upload failed!"
                if [ "$__changes_stashed" = "1" ]; then
                    dotfiles stash pop > /dev/null 2>&1
                fi
                unset __changes_stashed
                return
            fi

            if [ "$__changes_stashed" = "1" ]; then
                dotfiles stash pop > /dev/null 2>&1
            fi
            unset __changes_stashed

            # dotfiles push
            ;;
        suppress)
            if [ -z "$2" ]; then
                echo "Please specify a file to suppress."
                return
            fi

            if [ ! -f "$HOME/$2" ]; then
                echo "Requested file does not exist. Typo?"
                return
            fi

            rm $HOME/$2
            dotfiles update-index --skip-worktree $2
            ;;
        restore)
            if [ -z "$2" ]; then
                echo "Please specify a file to restore."
                return
            fi

            if [ -f "$HOME/$2" ]; then
                echo "Request file already exists. Typo?"
                return
            fi

            dotfiles update-index --no-skip-worktree $2
            dotfiles checkout -- $2
            ;;
        x)
            shift
            dotfiles $@
            ;;
        "")
            echo "Please specify one of the following options: x, update, upload, register, suppress, restore, usessh, config"
            return
            ;;
        usessh)
            __old_name=$(dotfiles remote get-url origin | sed -rn "s/https:\/\/github.com\/(.*)/\1/p")
            if [ -n "$__old_name" ]; then
                dotfiles remote set-url origin "git@github.com:$__old_name"
                echo "SSH access configured."
            else
                echo "SSH access is already set up!"
            fi
            unset __old_name
            return
            ;;
        config)
            $HOME/tools/config.sh
            return
            ;;
        *)
            echo "Unknown option: $1"
            return
            ;;
    esac
}
alias ".fx"="dotfiles"

# Basic aliases
alias e="exit 0"
alias c=clear
alias l="ls --color=auto"
alias ls="ls --color=auto"
alias cd..="cd .."
alias se="vim ~/.crc"
alias sr="source ~/.crc"
alias sc="se && sr"
cap() {
    if [ -z "$1" ]; then
        echo Missing file \#1.
    elif [ -z "$2" ]; then
        echo Missing file \#2.
    else
        comm -12 <(cat $1 | sort) <(cat $2 | sort)
    fi
}
xcap() {
    if [ -z "$1" ]; then
        echo Missing file \#1.
    elif [ -z "$2" ]; then
        echo Missing file \#2.
    else
        comm -3 <(cat $1 | sort) <(cat $2 | sort)
    fi
}

# Course aliases
alias sshl="ssh jfdoming@linux.student.cs.uwaterloo.ca $@"

# VCS aliases
VCS="git"
alias v="$VCS"

vs() {
    if $VCS rev-parse --is-inside-work-tree > /dev/null 2>&1; then
        $VCS status -sb
    else
        ls
    fi
}

alias vl="$VCS log"

va() {
    if [ $# -eq 0 ]; then
        $VCS add -A
    else
        $VCS add $@
    fi
}

alias vm="$VCS commit"
alias vma="$VCS commit --amend"
alias vmx="$VCS commit --amend --no-edit"
alias vr="$VCS reset"
alias vd="$VCS diff --color"

vx() {
    if [ $# -eq 0 ]; then
        $VCS rebase -i --empty drop
    else
        $VCS rebase $@
    fi
}
alias vxi="vx -i --empty drop"
alias vxc="vx --continue"
alias vxa="vx --abort"

alias vb="$VCS branch"
alias vP="$VCS pull"
alias vp="$VCS pull --rebase"
alias vu="$VCS push"
alias vc="$VCS checkout"
alias vcp="$VCS cherry-pick"
alias vt="$VCS stash"
alias vta="$VCS stash apply"
alias vfp="$VCS fetch --all --prune"
alias vg="$VCS grep"
alias vds="$VCS diff --staged"

vB() {
    # Many thanks to https://stackoverflow.com/a/5188364
    git for-each-ref --sort=committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'
}

vbr() {
    if [ "$1" != "-f" ]; then
        $VCS fetch --all --prune
    fi

    # https://medium.com/@kcmueller/delete-local-git-branches-that-were-deleted-on-remote-repository-b596b71b530c
    branches="$(vb -vv 2> /dev/null | grep ': gone]' | grep -v '\*' | awk '{ print $1; }')"
    if [ -z "$branches" ]; then
        echo "No branches with a missing upstream."
    else
        if [ "$1" = "-f" ]; then
            echo -n "$branches" | xargs -r git branch -D
        else
            echo "Branches with a missing upstream:"
            echo "$branches"
            echo "Use -f to remove branches."
        fi
    fi
}

vW() {
    if [ $# -eq 0 ]; then
        $VCS check-whitespace .
    else
        $VCS check-whitespace $@
    fi
}

vfr() {
    if [ -z "$1" ]; then
        echo "Missing search string."
        return
    fi

    if [ "$#" -eq 1 ]; then
        echo "Missing replacement string."
        return
    fi

    $VCS grep -l $1 | xargs sed -i "" -E -e "s/$1/$2/g"
}

vnt() {
    # git not-tree
    git ls-files --others --directory
}

# Requires git v2.36
vbb() {
    BRANCH_BASE="$1"
    if [ -z "$BRANCH_BASE" ]; then
        BRANCH_BASE="main"
    fi
    git rev-parse "$(git rev-list --exclude-first-parent-only ^$BRANCH_BASE "$(git branch --show-current)"| tail -1)^"
}

vdn() {
    n="$1"
    if [ -z "$n" ]; then
        n=1
    else
        shift
    fi
    case "$n" in
        ''|*[!0-9]*) ref="$n"; base_ref="$n~" ;;
        *) ref="HEAD~$((n-1))"; base_ref="HEAD~$n" ;;
    esac
    $VCS diff --color "$base_ref" "$ref" "$@"
}

sync-commit() {
    if [ -z "$1" ]; then
        echo "Path to other repo is required" >&2
        return 1
    fi
    repo="$1"

    if [ -z "$2" ]; then
        commit=HEAD
    else
        commit="$2"
    fi

    if [ -n "$(git status --porcelain)" ]; then
        echo "Unstaged changes found, please commit or discard them and try again" >&2
        return 1
    fi

    git apply <(git -C "$repo" show "$commit")
    MSG="$(git -C "$repo" log -n 1 --pretty=format:'%s' "$commit")"
    git add -A
    git commit -m "$MSG"
}

# For git who? (blame)
alias vw=$HOME/tools/ruby/git_blame.rb $@


# Docker aliases
alias d="docker"
alias dxs="docker system prune --all --force --volumes"
dxv() {
    VOLUMES_TO_REMOVE="$(docker volume ls -qf dangling=true)"
    if [ -n "$VOLUMES_TO_REMOVE" ]; then
        docker volume rm $VOLUMES_TO_REMOVE
    fi
}
dx() {
    dxs
    dxv
}
alias dc="docker-compose"
alias dcu="dc up"


alias py="python3" # Overwritten on Windows platforms

PATH="$PATH:$HOME/tools/sh:$HOME/tools/local/sh:$HOME/tools/local/py"

viw() {
    vi "$(which $@)"
}

# Platform-specific scripts
if [ -f "$HOME/.auxrc" ]; then
    source "$HOME/.auxrc"
fi

if [ -f "$HOME/.crc-win10" ]; then
    source "$HOME/.crc-win10"
fi
if [ -f "$HOME/.crc-macos" ]; then
    source "$HOME/.crc-macos"
fi
if [ -f "$HOME/.crc-linux" ]; then
    source "$HOME/.crc-linux"
fi


# Functions depending on platform-specific scripts.
termopen() {
    if [ -z "$1" ]; then
        return
    fi
    if [ -d "$1" ]; then
        echo "cd to $1"
        cd "$1"

        # The behaviour of the `ls` command depends on the platform.
        ls -a
    elif [ -f "$1" ]; then
        echo "edit $1"
        if [ -z "$2" ]; then
            vim "$1"
        else
            vim "$1" +"$2"
        fi
    fi
}

if command -v thefuck > /dev/null; then
    eval $(thefuck --alias oops)
fi
alias fuck="oops"

_install_shell_completions() {
    shell_name="$1"
    command -v fzf > /dev/null && eval "$(fzf --$shell_name)"
    command -v jj > /dev/null; . <(COMPLETE=$shell_name jj)
}
